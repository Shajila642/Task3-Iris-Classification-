import numpy as np
import tensorflow as tf
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report

# Load the Iris dataset
iris = load_iris()
X, y = iris.data, iris.target

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# SVM Classifier using scikit-learn
svm_classifier = SVC(kernel='linear', C=1)
svm_classifier.fit(X_train_scaled, y_train)

# Make predictions using SVM
svm_predictions = svm_classifier.predict(X_test_scaled)

# Accuracy and Classification Report for SVM
svm_accuracy = accuracy_score(y_test, svm_predictions)
print("SVM Classifier:")
print(f"Accuracy: {svm_accuracy:.2f}")
print("Classification Report:")
print(classification_report(y_test, svm_predictions))

# Neural Network using TensorFlow
model = tf.keras.Sequential([
    tf.keras.layers.Input(shape=(4,)),
    tf.keras.layers.Dense(8, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')
])

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model.fit(X_train_scaled, y_train, epochs=50, verbose=0)

# Make predictions using the neural network
nn_predictions = np.argmax(model.predict(X_test_scaled), axis=-1)

# Accuracy and Classification Report for Neural Network
nn_accuracy = accuracy_score(y_test, nn_predictions)
print("\nNeural Network:")
print(f"Accuracy: {nn_accuracy:.2f}")
print("Classification Report:")
print(classification_report(y_test, nn_predictions))

# Example data for prediction (replace this with your own data)
example_data = np.array([[5.1, 3.5, 1.4, 0.2],  # Feature values for the first sample
                         [6.3, 3.3, 4.7, 1.6],  # Feature values for the second sample
                         [7.2, 3.0, 5.8, 1.6]])  # Feature values for the third sample

# Standardize the example data
example_data_scaled = scaler.transform(example_data)

# Make predictions using the SVM classifier
svm_predictions_new_data = svm_classifier.predict(example_data_scaled)
print("SVM Classifier Predictions:")
print(svm_predictions_new_data)

# Make predictions using the neural network
nn_predictions_new_data = np.argmax(model.predict(example_data_scaled), axis=-1)
print("\nNeural Network Predictions:")
print(nn_predictions_new_data)
